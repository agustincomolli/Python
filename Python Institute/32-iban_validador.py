"""
Un n칰mero de cuenta compatible con IBAN consta de:

- Un c칩digo de pa칤s de dos letras tomado del est치ndar ISO 3166-1 (por ejemplo, 
FR para Francia, GB para Gran Breta침a DE para Alemania, y as칤 sucesivamente).
- Dos d칤gitos de verificaci칩n utilizados para realizar las verificaciones de 
validez: pruebas r치pidas y simples, pero no totalmente confiables, que 
muestran si un n칰mero es inv치lido (distorsionado por un error tipogr치fico) o 
v치lido.
- El n칰mero de cuenta real (hasta 30 caracteres alfanum칠ricos; la longitud de 
esa parte depende del pa칤s).
- El est치ndar dice que la validaci칩n requiere los siguientes pasos (seg칰n 
Wikipedia):

(Paso 1) Verificar que la longitud total del IBAN sea correcta seg칰n el pa칤s 
(este programa no lo har치, pero puedes modificar el c칩digo para cumplir con 
este requisito si lo deseas; nota: pero debes ense침ar al c칩digo a conocer 
todas las longitudes utilizadas en Europa).
(Paso 2) Mueve los cuatro caracteres iniciales al final de la cadena (es 
decir, el c칩digo del pa칤s y los d칤gitos de verificaci칩n).
(Paso 3) Reemplaza cada letra en la cadena con dos d칤gitos, expandiendo as칤 
la cadena, donde A = 10, B = 11 ... Z = 35.
(Paso 4) Interpreta la cadena como un entero decimal y calcula el residuo de 
ese n칰mero dividi칠ndolo entre 97. Si el residuo es 1, pasa la prueba de 
verificaci칩n de d칤gitos y el IBAN puede ser v치lido.
"""

from mylib import *


def validate_iban(iban: str) -> bool:
    """
    Devuelve True si el par치metro iban cumple con los requisitos para ser un
    c칩digo IBAN correcto.

    Args:
        iban (str): Es el c칩digo que se quiere verificar.
    """

    # Quitar los espacios en blanco.
    iban = iban.replace(" ", "")
    # Verificar que solo haya n칰meros y letras.
    if not iban.isalnum():
        raise ValueError("Has introducido caracteres inv치lidos.")
    elif len(iban) < 15 or len(iban) > 30:
        raise ValueError(
            "El c칩digo IBAN no tiene la cantidad de d칤gitos requeridos.")
    else:
        # Poner las letras en may칰sculas.
        iban = iban.upper()
        # Trasladar los 4 primeros caracteres al final de la cadena.
        iban = iban[4:] + iban[:4]

        verifiation_code = ""
        # Reemplazar cada letra en la cadena con dos d칤gitos, expandiendo as칤 
        # la cadena, donde A = 10, B = 11 ... Z = 35.
        for character in iban:
            if character.isdigit():
                verifiation_code += character
            else:
                verifiation_code += str(10 + ord(character) - ord("A"))

        verifiation_code = int(verifiation_code)
        # Calcular si residuo de ese n칰mero dividi칠ndolo entre 97 es igual a 1.
        if verifiation_code % 97 == 1:
            return True
        else:
            return False


clear_screen()
print(color_me("游눯 International Bank Account Number 游눯\n", "yellow"))

iban = input_color("Ingrese un IBAN: ", "green")
try:
    if validate_iban(iban):
        print("\nEl IBAN parece correcto. 九덢잺")
    else:
        print("\nEl c칩digo IBAN no ha pasado la verificaci칩n. 九뒲잺")
except ValueError as error:
    show_error(str(error))
